 ------
 Usage
 ------
 ------
 $Rev: 451673 $ $Date: 2006-09-30 14:25:25 -0700 (Sat, 30 Sep 2006) $

~~ 
~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~  http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.
~~

Usage

 There are 3 basic things you can translate:
 
 * Class files
 
 * Jar files

 * Jar Maven Projects
 
 []

* Translate Class Files

 Specify a <<<fileset>>> which includes the <<class>> files to be translated.

+----------+
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>retrotranslator-maven-plugin</artifactId>
    <executions>
        <execution>
            <phase>process-classes</phase>
            <goals>
                <goal>translate</goal>
            </goals>
            <configuration>
                <fileset>
                    <basedir>${project.build.outputDirectory}</basedir>
                    <includes>
                        <include>**/*.class</include>
                    </includes>
                </fileset>
            </configuration>
        </execution>
    </executions>
</plugin>
+----------+

* Translate Jar Files

 Specify a <<<jarfileset>>> which includes the <<jar>> files to be translated.

+----------+
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>retrotranslator-maven-plugin</artifactId>
    <executions>
        <execution>
            <phase>process-classes</phase>
            <goals>
                <goal>translate</goal>
            </goals>
            <configuration>
                <jarfileset>
                    <basedir>${pom.basedir}/lib</basedir>
                    <includes>
                        <include>**/*.jar</include>
                    </includes>
                </jarfileset>
            </configuration>
        </execution>
    </executions>
</plugin>
+----------+

* Translate a Jar Maven Project

 When executing on a <<jar>> project, the <<<translate-project>>> goal will translate the
 project's artifacts (the jar file) and then optionally attach the new retrotranslated
 artifact to be included in <<<install>>> and <<<deploy>>> operations.

+----------+
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>retrotranslator-maven-plugin</artifactId>
    <executions>
        <execution>
            <goals>
                <goal>translate-project</goal>
            </goals>
            <configuration>
                <classifier>jdk14</classifier>
                <attach>true</attach>
            </configuration>
        </execution>
    </executions>
</plugin>
+----------+

* Translate and Verify

 Notice the <<<$\{path_to_rt.jar\}>>> variable inside the \<verifyClasspath> element - you have to set 
 this variable inside your <<<.m2/settings.xml>>> file to point to pre-JRE-1.5 rt.jar for the verification 
 process to find it.

+----------+
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>retrotranslator-maven-plugin</artifactId>
    <executions>
        <execution>
            <phase>process-classes</phase>
            <goals>
                <goal>translate</goal>
            </goals>
            <configuration>
                <fileset>
                    <basedir>${project.build.outputDirectory}</basedir>
                    <includes>
                        <include>**/*.class</include>
                    </includes>
                </fileset>
                <verifyClasspath>
                    <element>${path_to_rt.jar}</element>
                </verifyClasspath>
            </configuration>
        </execution>
    </executions>
</plugin>
+----------+

